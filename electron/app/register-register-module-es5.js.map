{"version":3,"sources":["webpack:///src/app/register/register.page.html","webpack:///src/app/register/register-routing.module.ts","webpack:///src/app/register/register.module.ts","webpack:///src/app/register/register.page.scss","webpack:///src/app/register/register.page.ts"],"names":["routes","path","component","RegisterPageRoutingModule","imports","forChild","exports","RegisterPageModule","declarations","RegisterPage","formBuilder","authService","accountService","router","platform","loginError","loginErrorMessage","validation_messages","firstName","type","message","lastName","phoneNumber","email","password","cpassword","registerForm","group","required","pattern","compose","minLength","validators","bind","backButtonSubscription","backButton","subscribe","isActive","url","navigator","exitApp","unsubscribe","formGroup","get","value","confirmPassword","passwordNotMatch","register","then","navigate","account","fName","lName","mobileNumber","createAccount","err","selector","template"],"mappings":"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","file":"register-register-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title class=\\\"ion-text-center\\\">Choices</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card class=\\\"registerCard positionCard\\\">\\n    <ion-card-header class=\\\"ion-text-center\\\" style=\\\"background-color: var(--ion-color-primary);\\\"> <ion-label class=\\\"signupLabel\\\">Sign Up</ion-label></ion-card-header>\\n    <ion-card-content>\\n      <ion-list lines=\\\"none\\\">\\n        <form [formGroup]=\\\"registerForm\\\">\\n          <ion-item class=\\\"roundedCorners\\\">\\n            <ion-label position=\\\"floating\\\">First Name</ion-label>\\n            <ion-input\\n              \\n              formControlName=\\\"firstName\\\"\\n              type=\\\"text\\\"\\n              required\\n            ></ion-input>\\n          </ion-item>\\n\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container\\n              *ngFor=\\\"let validation of validation_messages.firstName\\\"\\n            >\\n              <div\\n                class=\\\"error-message\\\"\\n                *ngIf=\\\"registerForm.get('firstName').hasError(validation.type) && (registerForm.get('firstName').dirty || registerForm.get('firstName').touched)\\\"\\n              >\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Last Name</ion-label>\\n            <ion-input\\n              formControlName=\\\"lastName\\\"\\n              type=\\\"text\\\"\\n              required\\n            ></ion-input>\\n          </ion-item>\\n\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container\\n              *ngFor=\\\"let validation of validation_messages.lastName\\\"\\n            >\\n              <div\\n                class=\\\"error-message\\\"\\n                *ngIf=\\\"registerForm.get('lastName').hasError(validation.type) && (registerForm.get('lastName').dirty || registerForm.get('lastName').touched)\\\"\\n              >\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Phone Number</ion-label>\\n            <ion-input\\n              formControlName=\\\"phoneNumber\\\"\\n              type=\\\"text\\\"\\n              \\n            ></ion-input>\\n          </ion-item>\\n\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container\\n              *ngFor=\\\"let validation of validation_messages.phoneNumber\\\"\\n            >\\n              <div\\n                class=\\\"error-message\\\"\\n                *ngIf=\\\"registerForm.get('phoneNumber').hasError(validation.type) && (registerForm.get('phoneNumber').dirty || registerForm.get('phoneNumber').touched)\\\"\\n              >\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Email</ion-label>\\n            <ion-input formControlName=\\\"email\\\" type=\\\"text\\\" required></ion-input>\\n          </ion-item>\\n\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n              <div\\n                class=\\\"error-message\\\"\\n                *ngIf=\\\"registerForm.get('email').hasError(validation.type) && (registerForm.get('email').dirty || registerForm.get('email').touched)\\\"\\n              >\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Password</ion-label>\\n            <ion-input\\n              formControlName=\\\"password\\\"\\n              type=\\\"password\\\"\\n              required\\n            ></ion-input>\\n          </ion-item>\\n\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container\\n              *ngFor=\\\"let validation of validation_messages.password\\\"\\n            >\\n              <div\\n                class=\\\"error-message\\\"\\n                *ngIf=\\\"registerForm.get('password').hasError(validation.type) && (registerForm.get('password').dirty || registerForm.get('password').touched)\\\"\\n              >\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Confirm Password</ion-label>\\n            <ion-input\\n              formControlName=\\\"cpassword\\\"\\n              type=\\\"password\\\"\\n              required\\n            ></ion-input>\\n          </ion-item>\\n\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container\\n              *ngFor=\\\"let validation of validation_messages.cpassword\\\"\\n            >\\n              <div\\n                class=\\\"error-message\\\"\\n                *ngIf=\\\"registerForm.get('cpassword').hasError(validation.type) && (registerForm.get('cpassword').dirty || registerForm.get('cpassword').touched)\\\"\\n              >\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"!registerForm.get('cpassword').errors && registerForm.hasError('passwordNotMatch') && (registerForm.get('cpassword').dirty || registerForm.get('cpassword').touched)\\\"\\n            >\\n              Password and Confirm Password do not match!\\n            </div>\\n          </div>\\n        </form>\\n      </ion-list>\\n      <ion-button\\n        expand=\\\"full\\\"\\n        color=\\\"primary\\\"\\n        [disabled]=\\\"!registerForm.valid\\\"\\n        (click)=\\\"register()\\\"\\n        color=\\\"tertiary\\\"\\n        >Create Account!</ion-button\\n      >\\n      <div class=\\\"validation-errors\\\">\\n       \\n        <div\\n          class=\\\"error-message\\\"\\n          *ngIf=\\\"loginError\\\"\\n        >\\n          {{ loginErrorMessage }}\\n        </div>\\n   \\n    </div>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-card class=\\\"positionCard\\\">\\n    <ion-card-content class=\\\"ion-text-center\\\">\\n      <h2>Already have an account? <ion-button routerLink=\\\"../login\\\" color=\\\"tertiary\\\">Login</ion-button></h2>\\n      \\n    </ion-card-content>\\n  </ion-card>\\n\\n  <!-- <ion-card class=\\\"card-center\\\">\\n    <ion-card-header color=\\\"primary\\\">\\n      \\n      <ion-card-title class=\\\"ion-text-center\\\">Register</ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">First Name</ion-label>\\n        <ion-input type=\\\"text\\\" [(ngModel)]=\\\"fName\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Last Name</ion-label>\\n        <ion-input type=\\\"text\\\" [(ngModel)]=\\\"lName\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Email</ion-label>\\n        <ion-input type=\\\"text\\\" [(ngModel)]=\\\"email\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Password</ion-label>\\n        <ion-input type=\\\"password\\\" [(ngModel)]=\\\"password\\\"></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">Confirm Password</ion-label>\\n        <ion-input type=\\\"password\\\" [(ngModel)]=\\\"cpassword\\\"></ion-input>\\n      </ion-item>\\n      <ion-row>\\n        <ion-col>\\n          <ion-button color=\\\"primary\\\" expand=\\\"full\\\" fill=\\\"solid\\\" [disabled]=\\\"email==''&&password==''&&cpassword==''&&fName==''&&lName==''\\\" (click)=\\\"register()\\\">Register</ion-button>\\n        </ion-col>\\n        <ion-col>\\n          <ion-button color=\\\"secondary\\\" expand=\\\"full\\\" fill=\\\"solid\\\" routerLink=\\\"../login\\\">Login</ion-button>\\n        </ion-col>\\n      </ion-row>\\n    </ion-card-content>\\n  </ion-card> -->\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    IonicModule,\n    RegisterPageRoutingModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","export default \".card-center {\\n  transform: translateX(-50%) translateY(-50%);\\n  top: 50%;\\n  left: 50%;\\n  width: 90%;\\n  margin: 0;\\n  position: absolute;\\n}\\n\\n.error-message {\\n  color: var(--ion-color-danger);\\n}\\n\\n.signupLabel {\\n  font-size: 1.6em;\\n  font-weight: bold;\\n}\\n\\n.positionCard {\\n  position: relative;\\n  border-radius: 15px;\\n  top: 7%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcmVnaXN0ZXIvRDpcXFZhbHBvIENvdXJzZXNcXFNwcmluZyAnMjBcXFNvZnR3YXJlIERlc2lnbiBhbmQgRGV2ZWxvcG1lbnRcXElvbmljIFByb2plY3RzXFxOZXdDaG9pY2VzXFxjaG9pY2VzTmV3L3NyY1xcYXBwXFxyZWdpc3RlclxccmVnaXN0ZXIucGFnZS5zY3NzIiwic3JjL2FwcC9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSw0Q0FBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0EsVUFBQTtFQUNBLFNBQUE7RUFDQSxrQkFBQTtBQ0NKOztBREVBO0VBQ0ksOEJBQUE7QUNDSjs7QURFQTtFQUNJLGdCQUFBO0VBQ0EsaUJBQUE7QUNDSjs7QURHQTtFQUNJLGtCQUFBO0VBQ0EsbUJBQUE7RUFFRixPQUFBO0FDREYiLCJmaWxlIjoic3JjL2FwcC9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZC1jZW50ZXJ7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcclxuICAgIHRvcDogNTAlO1xyXG4gICAgbGVmdDogNTAlO1xyXG4gICAgd2lkdGg6IDkwJTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxufVxyXG5cclxuLmVycm9yLW1lc3NhZ2V7XHJcbiAgICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLWRhbmdlcik7XHJcbn1cclxuXHJcbi5zaWdudXBMYWJlbHtcclxuICAgIGZvbnQtc2l6ZTogMS42ZW07XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIC8vIGNvbG9yOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcclxufVxyXG5cclxuLnBvc2l0aW9uQ2FyZHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XHJcbiAgXHJcbiAgdG9wOiA3JTtcclxufVxyXG5cclxuXHJcblxyXG4vLyAucm91bmRlZENvcm5lcnN7XHJcbi8vICAgICBib3JkZXItcmFkaXVzOiAxMHB4ICFpbXBvcnRhbnQ7XHJcbi8vICAgICAvLyAvLyBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xyXG4vLyAgICAgLy8gLy8gZm9udC1zaXplOiAwLjllbTtcclxuLy8gICAgIGJvcmRlcjogMXB4IHNvbGlkICFpbXBvcnRhbnQ7XHJcbi8vICAgICAvLyAtLWJhY2tncm91bmQ6IHJnYigyMTksMjE5LDIxOSkgIWltcG9ydGFudDtcclxuLy8gICAgIC8qIGhlaWdodDogMTAlOyAqL1xyXG4vLyAgICAgLyogd2lkdGg6IDQxJTsgKi9cclxuLy8gICAgIC8vIG1heC13aWR0aDogNTB2dzsgLy8gdGhpcyBpcyBhcHBseWluZyBwZXJmZWN0bHlcclxuLy8gICAgIC8vIG1heC1oZWlnaHQ6IDEwdmg7XHJcbi8vIH0iLCIuY2FyZC1jZW50ZXIge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgd2lkdGg6IDkwJTtcbiAgbWFyZ2luOiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG5cbi5lcnJvci1tZXNzYWdlIHtcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1kYW5nZXIpO1xufVxuXG4uc2lnbnVwTGFiZWwge1xuICBmb250LXNpemU6IDEuNmVtO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLnBvc2l0aW9uQ2FyZCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyLXJhZGl1czogMTVweDtcbiAgdG9wOiA3JTtcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { Account } from '../models/account.model';\nimport { AccountService } from '../settings/account/account.service';\nimport { Platform } from '@ionic/angular';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthenticationService, private accountService: AccountService, private router: Router,\n    private platform: Platform) {\n    \n      this.registerForm = this.formBuilder.group({\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        phoneNumber: ['', Validators.pattern('^((\\\\+91-?)|0)?[0-9]{10}$')],\n        email: ['', Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n        ])],\n        password: ['', Validators.compose([\n          Validators.minLength(5),\n          Validators.required,\n          // Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n        ])],\n        cpassword: ['', Validators.required]\n      }, { \n        validators: this.password.bind(this)\n      })\n     }\n  email: string\n  fName: string\n  lName: string\n  // password: string\n  cpassword: string\n  account: Account\n  backButtonSubscription;\n  registerForm: FormGroup;\n  loginError: boolean = false;\n  loginErrorMessage: string = ''\n\n  public validation_messages = {\n    firstName: [\n      { type: 'required', message: 'First Name is required' }\n    ],\n    lastName: [\n      { type: 'required', message: 'Last Name is required' }\n    ],\n    phoneNumber: [\n      { type: 'pattern', message: 'Please enter a valid phone number' }\n    ],\n    email: [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Please enter a valid email address' }\n    ],\n    password: [\n      { type: 'required', message: 'Password is required' },\n      // { type: 'pattern', message: 'Please enter a valid password' },\n      { type: 'minLength', message: 'Password must be over 5 characters' }\n    ],\n    cpassword: [\n      { type: 'required', message: 'Password is required' }\n    ]\n  }\n\n  ngOnInit() {\n  }\n\n\n  \n  ionViewDidEnter(){ this.backButtonSubscription = this.platform.backButton.subscribe(()=>{ \n    if ((this.router.isActive('/register', true) && this.router.url === '/register')) {\n      navigator['app'].exitApp();\n    }\n    }); } \n  \n  ionViewWillLeave(){ this.backButtonSubscription.unsubscribe();}\n\n  password(formGroup: FormGroup) {\n    const { value: password } = formGroup.get('password');\n    const { value: confirmPassword } = formGroup.get('cpassword');\n    return password === confirmPassword ? null : { passwordNotMatch: true };\n  }\n\n  register(){\n    // if(this.password === this.cpassword){\n    //   this.authService.register(this.email, this.password).then(()=>{\n    //     this.router.navigate(['/tabs'])\n    //     this.account = {\n    //       fName: this.fName,\n    //       lName: this.lName\n    //     }\n    //     this.accountService.updateAccount(this.account)\n        \n    //   })\n\n    // }\n\n       this.authService.register(this.registerForm.get('email').value, this.registerForm.get('password').value).then(()=>{\n        this.router.navigate(['/tabs'])\n        this.account = {\n          fName: this.registerForm.get('firstName').value,\n          lName: this.registerForm.get('lastName').value,\n          mobileNumber: this.registerForm.get('phoneNumber').value\n        }\n        this.accountService.createAccount(this.account)\n        \n      }).catch(err=>{\n        this.loginError = true;\n        this.loginErrorMessage = err.message\n      })\n  }\n\n}\n"]}