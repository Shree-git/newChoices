{"version":3,"sources":["./src/app/settings/account/password-reset/password-reset.page.html","./src/app/settings/account/password-reset/password-reset-routing.module.ts","./src/app/settings/account/password-reset/password-reset.module.ts","./src/app/settings/account/password-reset/password-reset.page.scss","./src/app/settings/account/password-reset/password-reset.page.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,s6BAAu2B,sBAAsB,kmBAAkmB,sBAAsB,4tBAA4tB,qBAAqB,wDAAwD,E;;;;;;;;;;;;;;;;;;;ACApwE;AACc;AAEG;AAE1D,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,sEAAiB;KAC7B;CACF,CAAC;AAMF,IAAa,8BAA8B,GAA3C,MAAa,8BAA8B;CAAG;AAAjC,8BAA8B;IAJ1C,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,8BAA8B,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBF;AACM;AACF;AACO;AACP;AAEoC;AAEvB;AAY1D,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;CAAG;AAA1B,uBAAuB;IAVnC,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,0DAAW;YACX,kEAAmB;YACnB,0DAAW;YACX,6FAA8B;SAC/B;QACD,YAAY,EAAE,CAAC,sEAAiB,CAAC;KAClC,CAAC;GACW,uBAAuB,CAAG;AAAH;;;;;;;;;;;;;ACpBpC;AAAe,6GAA8C,mLAAmL,E;;;;;;;;;;;;;;;;;;;ACA9L;AACkB;AACY;AAOhF,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAa5B,YAAoB,WAAwB,EAClC,WAAkC;QADxB,gBAAW,GAAX,WAAW,CAAa;QAClC,gBAAW,GAAX,WAAW,CAAuB;QAZrC,wBAAmB,GAAG;YAE3B,QAAQ,EAAE;gBACR,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;gBACrD,iEAAiE;gBACjE,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,oCAAoC,EAAE;aACrE;YACD,SAAS,EAAE;gBACT,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;aACtD;SACF;QAGC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAEzC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;oBAChC,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,QAAQ;iBAEpB,CAAC,CAAC;YACH,SAAS,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACrC,EAAE;YACD,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;SACrC,CAAC;IACH,CAAC;IAGD,QAAQ;IACT,CAAC;IAEA,QAAQ,CAAC,SAAoB;QAC5B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACtD,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC9D,OAAO,QAAQ,KAAK,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC;IAC1E,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;IACjF,CAAC;CAKF;;YAhCkC,0DAAW;YACrB,6FAAqB;;AAdjC,iBAAiB;IAL7B,+DAAS,CAAC;QACT,QAAQ,EAAE,oBAAoB;QAC9B,6PAAyC;;KAE1C,CAAC;GACW,iBAAiB,CA6C7B;AA7C6B","file":"password-reset-password-reset-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/tabs/settings/account\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Reset your password</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"registerForm\\\">\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Password</ion-label>\\n    <ion-input\\n      formControlName=\\\"password\\\"\\n      type=\\\"password\\\"\\n      required\\n    ></ion-input>\\n  </ion-item>\\n\\n  <div class=\\\"validation-errors\\\">\\n    <ng-container\\n      *ngFor=\\\"let validation of validation_messages.password\\\"\\n    >\\n      <div\\n        class=\\\"error-message\\\"\\n        *ngIf=\\\"registerForm.get('password').hasError(validation.type) && (registerForm.get('password').dirty || registerForm.get('password').touched)\\\"\\n      >\\n        {{ validation.message }}\\n      </div>\\n    </ng-container>\\n  </div>\\n\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Confirm Password</ion-label>\\n    <ion-input\\n      formControlName=\\\"cpassword\\\"\\n      type=\\\"password\\\"\\n      required\\n    ></ion-input>\\n  </ion-item>\\n\\n  <div class=\\\"validation-errors\\\">\\n    <ng-container\\n      *ngFor=\\\"let validation of validation_messages.cpassword\\\"\\n    >\\n      <div\\n        class=\\\"error-message\\\"\\n        *ngIf=\\\"registerForm.get('cpassword').hasError(validation.type) && (registerForm.get('cpassword').dirty || registerForm.get('cpassword').touched)\\\"\\n      >\\n        {{ validation.message }}\\n      </div>\\n    </ng-container>\\n    <div\\n      class=\\\"error-message\\\"\\n      *ngIf=\\\"!registerForm.get('cpassword').errors && registerForm.hasError('passwordNotMatch') && (registerForm.get('cpassword').dirty || registerForm.get('cpassword').touched)\\\"\\n    >\\n      Password and Confirm Password do not match!\\n    </div>\\n  </div>\\n  \\n</form>\\n<ion-button\\n        expand=\\\"full\\\"\\n        color=\\\"primary\\\"\\n        [disabled]=\\\"!registerForm.valid\\\"\\n        (click)=\\\"resetPassword()\\\"\\n        color=\\\"tertiary\\\"\\n        >Reset Password</ion-button\\n      >\\n      <!-- <div class=\\\"validation-errors\\\">\\n       \\n        <div\\n          class=\\\"error-message\\\"\\n          *ngIf=\\\"loginError\\\"\\n        >\\n          {{ loginErrorMessage }}\\n        </div>\\n   \\n    </div> -->\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PasswordResetPage } from './password-reset.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PasswordResetPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PasswordResetPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { IonicModule } from '@ionic/angular';\n\nimport { PasswordResetPageRoutingModule } from './password-reset-routing.module';\n\nimport { PasswordResetPage } from './password-reset.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    PasswordResetPageRoutingModule\n  ],\n  declarations: [PasswordResetPage]\n})\nexport class PasswordResetPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL2FjY291bnQvcGFzc3dvcmQtcmVzZXQvcGFzc3dvcmQtcmVzZXQucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-password-reset',\n  templateUrl: './password-reset.page.html',\n  styleUrls: ['./password-reset.page.scss'],\n})\nexport class PasswordResetPage implements OnInit {\n  registerForm: FormGroup\n  public validation_messages = {\n   \n    password: [\n      { type: 'required', message: 'Password is required' },\n      // { type: 'pattern', message: 'Please enter a valid password' },\n      { type: 'minLength', message: 'Password must be over 5 characters' }\n    ],\n    cpassword: [\n      { type: 'required', message: 'Password is required' }\n    ]\n  }\n  constructor(private formBuilder: FormBuilder,\n    private authService: AuthenticationService) {\n    this.registerForm = this.formBuilder.group({\n     \n      password: ['', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        // Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])],\n      cpassword: ['', Validators.required]\n    }, { \n      validators: this.password.bind(this)\n    })\n   }\n\n\n   ngOnInit() {\n  }\n\n   password(formGroup: FormGroup) {\n    const { value: password } = formGroup.get('password');\n    const { value: confirmPassword } = formGroup.get('cpassword');\n    return password === confirmPassword ? null : { passwordNotMatch: true };\n  }\n\n  resetPassword(){\n    return this.authService.updatePassword(this.registerForm.get('password').value)\n  }\n\n\n \n\n}\n"],"sourceRoot":"webpack:///"}