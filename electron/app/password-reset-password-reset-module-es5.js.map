{"version":3,"sources":["webpack:///src/app/settings/account/password-reset/password-reset.page.html","webpack:///src/app/settings/account/password-reset/password-reset-routing.module.ts","webpack:///src/app/settings/account/password-reset/password-reset.module.ts","webpack:///src/app/settings/account/password-reset/password-reset.page.scss","webpack:///src/app/settings/account/password-reset/password-reset.page.ts"],"names":["routes","path","component","PasswordResetPageRoutingModule","imports","forChild","exports","PasswordResetPageModule","declarations","PasswordResetPage","formBuilder","authService","validation_messages","password","type","message","cpassword","registerForm","group","compose","minLength","required","validators","bind","formGroup","get","value","confirmPassword","passwordNotMatch","updatePassword","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKf,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,CAAvB;;AAWA,QAAaC,8BAA8B;AAAA;AAAA,KAA3C;;AAAaA,kCAA8B,6DAJ1C,+DAAS;AACRC,aAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,aAAO,EAAE,CAAC,4DAAD;AAFD,KAAT,CAI0C,GAA9BH,8BAA8B,CAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACIb,QAAaI,uBAAuB;AAAA;AAAA,KAApC;;AAAaA,2BAAuB,6DAVnC,+DAAS;AACRH,aAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,kEAHO,EAIP,0DAJO,EAKP,6FALO,CADD;AAQRI,kBAAY,EAAE,CAAC,sEAAD;AARN,KAAT,CAUmC,GAAvBD,uBAAuB,CAAvB;;;;;;;;;;;;;;;;ACpBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSf,QAAaE,iBAAiB;AAa5B,iCAAoBC,WAApB,EACUC,WADV,EAC8C;AAAA;;AAD1B,aAAAD,WAAA,GAAAA,WAAA;AACV,aAAAC,WAAA,GAAAA,WAAA;AAZH,aAAAC,mBAAA,GAAsB;AAE3BC,kBAAQ,EAAE,CACR;AAAEC,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADQ,EAER;AACA;AAAED,gBAAI,EAAE,WAAR;AAAqBC,mBAAO,EAAE;AAA9B,WAHQ,CAFiB;AAO3BC,mBAAS,EAAE,CACT;AAAEF,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADS;AAPgB,SAAtB;AAaL,aAAKE,YAAL,GAAoB,KAAKP,WAAL,CAAiBQ,KAAjB,CAAuB;AAEzCL,kBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWM,OAAX,CAAmB,CAChC,0DAAWC,SAAX,CAAqB,CAArB,CADgC,EAEhC,0DAAWC,QAFqB,CAAnB,CAAL,CAF+B;AAOzCL,mBAAS,EAAE,CAAC,EAAD,EAAK,0DAAWK,QAAhB;AAP8B,SAAvB,EAQjB;AACDC,oBAAU,EAAE,KAAKT,QAAL,CAAcU,IAAd,CAAmB,IAAnB;AADX,SARiB,CAApB;AAWA;;AA1B0B;AAAA;AAAA,mCA6BhB,CACX;AA9B2B;AAAA;AAAA,iCAgClBC,SAhCkB,EAgCI;AAAA,+BACFA,SAAS,CAACC,GAAV,CAAc,UAAd,CADE;AAAA,cACfZ,QADe,kBACtBa,KADsB;;AAAA,gCAEKF,SAAS,CAACC,GAAV,CAAc,WAAd,CAFL;AAAA,cAEfE,eAFe,mBAEtBD,KAFsB;;AAG9B,iBAAOb,QAAQ,KAAKc,eAAb,GAA+B,IAA/B,GAAsC;AAAEC,4BAAgB,EAAE;AAApB,WAA7C;AACD;AApC2B;AAAA;AAAA,wCAsCf;AACX,iBAAO,KAAKjB,WAAL,CAAiBkB,cAAjB,CAAgC,KAAKZ,YAAL,CAAkBQ,GAAlB,CAAsB,UAAtB,EAAkCC,KAAlE,CAAP;AACD;AAxC2B;;AAAA;AAAA,OAA9B;;;;cAamC;;cACV;;;;AAdZjB,qBAAiB,6DAL7B,gEAAU;AACTqB,cAAQ,EAAE,oBADD;AAETC,cAAQ,EAAR;AAAA;AAAA,6HAFS;;;;AAAA,KAAV,CAK6B,GAAjBtB,iBAAiB,CAAjB","file":"password-reset-password-reset-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/tabs/settings/account\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Reset your password</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"registerForm\\\">\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Password</ion-label>\\n    <ion-input\\n      formControlName=\\\"password\\\"\\n      type=\\\"password\\\"\\n      required\\n    ></ion-input>\\n  </ion-item>\\n\\n  <div class=\\\"validation-errors\\\">\\n    <ng-container\\n      *ngFor=\\\"let validation of validation_messages.password\\\"\\n    >\\n      <div\\n        class=\\\"error-message\\\"\\n        *ngIf=\\\"registerForm.get('password').hasError(validation.type) && (registerForm.get('password').dirty || registerForm.get('password').touched)\\\"\\n      >\\n        {{ validation.message }}\\n      </div>\\n    </ng-container>\\n  </div>\\n\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Confirm Password</ion-label>\\n    <ion-input\\n      formControlName=\\\"cpassword\\\"\\n      type=\\\"password\\\"\\n      required\\n    ></ion-input>\\n  </ion-item>\\n\\n  <div class=\\\"validation-errors\\\">\\n    <ng-container\\n      *ngFor=\\\"let validation of validation_messages.cpassword\\\"\\n    >\\n      <div\\n        class=\\\"error-message\\\"\\n        *ngIf=\\\"registerForm.get('cpassword').hasError(validation.type) && (registerForm.get('cpassword').dirty || registerForm.get('cpassword').touched)\\\"\\n      >\\n        {{ validation.message }}\\n      </div>\\n    </ng-container>\\n    <div\\n      class=\\\"error-message\\\"\\n      *ngIf=\\\"!registerForm.get('cpassword').errors && registerForm.hasError('passwordNotMatch') && (registerForm.get('cpassword').dirty || registerForm.get('cpassword').touched)\\\"\\n    >\\n      Password and Confirm Password do not match!\\n    </div>\\n  </div>\\n  \\n</form>\\n<ion-button\\n        expand=\\\"full\\\"\\n        color=\\\"primary\\\"\\n        [disabled]=\\\"!registerForm.valid\\\"\\n        (click)=\\\"resetPassword()\\\"\\n        color=\\\"tertiary\\\"\\n        >Reset Password</ion-button\\n      >\\n      <!-- <div class=\\\"validation-errors\\\">\\n       \\n        <div\\n          class=\\\"error-message\\\"\\n          *ngIf=\\\"loginError\\\"\\n        >\\n          {{ loginErrorMessage }}\\n        </div>\\n   \\n    </div> -->\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PasswordResetPage } from './password-reset.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PasswordResetPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PasswordResetPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { IonicModule } from '@ionic/angular';\n\nimport { PasswordResetPageRoutingModule } from './password-reset-routing.module';\n\nimport { PasswordResetPage } from './password-reset.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    PasswordResetPageRoutingModule\n  ],\n  declarations: [PasswordResetPage]\n})\nexport class PasswordResetPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL2FjY291bnQvcGFzc3dvcmQtcmVzZXQvcGFzc3dvcmQtcmVzZXQucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-password-reset',\n  templateUrl: './password-reset.page.html',\n  styleUrls: ['./password-reset.page.scss'],\n})\nexport class PasswordResetPage implements OnInit {\n  registerForm: FormGroup\n  public validation_messages = {\n   \n    password: [\n      { type: 'required', message: 'Password is required' },\n      // { type: 'pattern', message: 'Please enter a valid password' },\n      { type: 'minLength', message: 'Password must be over 5 characters' }\n    ],\n    cpassword: [\n      { type: 'required', message: 'Password is required' }\n    ]\n  }\n  constructor(private formBuilder: FormBuilder,\n    private authService: AuthenticationService) {\n    this.registerForm = this.formBuilder.group({\n     \n      password: ['', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        // Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])],\n      cpassword: ['', Validators.required]\n    }, { \n      validators: this.password.bind(this)\n    })\n   }\n\n\n   ngOnInit() {\n  }\n\n   password(formGroup: FormGroup) {\n    const { value: password } = formGroup.get('password');\n    const { value: confirmPassword } = formGroup.get('cpassword');\n    return password === confirmPassword ? null : { passwordNotMatch: true };\n  }\n\n  resetPassword(){\n    return this.authService.updatePassword(this.registerForm.get('password').value)\n  }\n\n\n \n\n}\n"]}